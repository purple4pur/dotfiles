set nocompatible

" --------------------------------------------------------------------------------
"   Theme
" --------------------------------------------------------------------------------
set background=light
colorscheme PaperColor

" --------------------------------------------------------------------------------
"   Common
" --------------------------------------------------------------------------------
filetype plugin indent on
syntax on
set autochdir
set autoread
set autowrite
set backspace=indent,eol,start
set clipboard+=unnamed
set complete-=i
set cursorcolumn
set cursorline
set fileencodings=ucs-bom,utf-8,cp936 fileencoding=utf-8
set foldcolumn=0
set foldmethod=marker
set hidden
set hlsearch ignorecase smartcase incsearch
set laststatus=2
set listchars+=tab:>-,trail:~,extends:>,precedes:<
set mouse=a
set mousemodel=extend
set noerrorbells
set nofixendofline
set noshowmatch
set notermguicolors
set novisualbell
set number
set pastetoggle=<F5>
set scrolloff=8
set showcmd
set showtabline=2
set sidescroll=1
set sidescrolloff=10
set smartindent cindent autoindent
set smarttab shiftwidth=4 tabstop=4 softtabstop=4 expandtab
set splitbelow
set splitright
set t_Co=256
set t_ZH=[3m     " <C-V><ESC>[3m
set t_ZR=[23m    " <C-V><ESC>[23m
set tags+=./tags;,./TAGS;
set textwidth=80
set title
set virtualedit=block

" --------------------------------------------------------------------------------
"   Netrw
" --------------------------------------------------------------------------------
let g:netrw_alto = 0
let g:netrw_keepdir = 0
let g:netrw_preview = 1
let g:netrw_winsize = 50

" --------------------------------------------------------------------------------
"   GUI
" --------------------------------------------------------------------------------
if has("gui_running")
    set guioptions-=T
endif

" --------------------------------------------------------------------------------
"   Key Mappings
" --------------------------------------------------------------------------------
" command
nnoremap ; :
vnoremap ; :
" movement
nnoremap j gj
nnoremap k gk
nnoremap 0 g0
nnoremap $ g$
nnoremap g$ $
nnoremap g0 0
nnoremap H z15h
nnoremap L z15l
vnoremap j gj
vnoremap k gk
vnoremap 0 g0
vnoremap $ g$
vnoremap g$ $
vnoremap g0 0
nnoremap , ;
vnoremap , ;
inoremap <A-h> <LEFT>
inoremap <A-j> <C-O>gj
inoremap <A-k> <C-O>gk
inoremap <A-l> <RIGHT>
" edit
nnoremap < <<
nnoremap > >>
vnoremap < <gv
vnoremap > >gv
nnoremap saiw" ""ciw"<C-R>""<ESC>b
nnoremap saiw' ""ciw'<C-R>"'<ESC>b
nnoremap saiw( ""ciw(<C-R>")<ESC>b
nnoremap saiw[ ""ciw[<C-R>"]<ESC>b
nnoremap saiw{ ""ciw{<C-R>"}<ESC>b
nnoremap saiw< ""ciw<<C-R>"><ESC>b
nnoremap saiw` ""ciw`<C-R>"`<ESC>b
vnoremap sa" ""c"<C-R>""<ESC>
vnoremap sa' ""c'<C-R>"'<ESC>
vnoremap sa( ""c(<C-R>")<ESC>
vnoremap sa[ ""c[<C-R>"]<ESC>
vnoremap sa{ ""c{<C-R>"}<ESC>
vnoremap sa< ""c<<C-R>"><ESC>
vnoremap sa` ""c`<C-R>"`<ESC>
nnoremap sd" vi"<ESC>`>lx`<hx
nnoremap sd' vi'<ESC>`>lx`<hx
nnoremap sd( vi(<ESC>`>lx`<hx
nnoremap sd[ vi[<ESC>`>lx`<hx
nnoremap sd{ vi{<ESC>`>lx`<hx
nnoremap sd< vi<<ESC>`>lx`<hx
nnoremap sd` vi`<ESC>`>lx`<hx
nnoremap <silent> <A-j> :move +1<CR>
nnoremap <silent> <A-k> :move -2<CR>
vnoremap <silent> <A-j> :move '>+1<CR>gv
vnoremap <silent> <A-k> :move '<-2<CR>gv
nnoremap <silent> <leader>t? :setlocal tabstop?<CR>
nnoremap <silent> <leader>t2 :setlocal shiftwidth=2 tabstop=2 softtabstop=2 tabstop?<CR>
nnoremap <silent> <leader>t3 :setlocal shiftwidth=3 tabstop=3 softtabstop=3 tabstop?<CR>
nnoremap <silent> <leader>t4 :setlocal shiftwidth=4 tabstop=4 softtabstop=4 tabstop?<CR>
nnoremap <silent> <leader>t8 :setlocal shiftwidth=8 tabstop=8 softtabstop=8 tabstop?<CR>
" search
nnoremap # *NN
nnoremap <silent> <leader>n :nohlsearch<CR>
" tab
nnoremap <leader>te :tabe<space>
nnoremap <leader>tb :tab sbuffer<space>
inoremap <silent> <F3> <C-O>:tabprevious<CR>
inoremap <silent> <F4> <C-O>:tabnext<CR>
nnoremap <silent> <F3> :tabprevious<CR>
nnoremap <silent> <F4> :tabnext<CR>
" tag
nnoremap <silent> <C-]> :tjump <C-R><C-W><CR>
nnoremap <leader>tj :tab stjump<space>
nnoremap <silent> <leader><C-]> :tab stjump <C-R><C-W><CR>
" window
nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <leader>< <C-W>10<
nnoremap <leader>> <C-W>10>
nnoremap <leader>- <C-W>5-
nnoremap <leader>+ <C-W>5+
nnoremap <leader>= <C-W>=
autocmd! FileType netrw call FixNetrwMap()
" fold
nnoremap <space> za
nnoremap <silent> <leader>zf :call FoldColumnToggle()<CR>:set foldcolumn?<CR>
nnoremap <silent> <leader>f? :setlocal foldmethod?<CR>
nnoremap <silent> <leader>fi :setlocal foldmethod=indent foldmethod?<CR>
nnoremap <silent> <leader>fm :setlocal foldmethod=marker foldmethod?<CR>
nnoremap <silent> <leader>fs :setlocal foldmethod=syntax foldmethod?<CR>
" diff
nnoremap <silent> <leader>do :diffoff<CR>
nnoremap <silent> <leader>dO :diffoff!<CR>
nnoremap <silent> <leader>dt :diffthis<CR>
nnoremap <silent> <leader>du :diffupdate!<CR>
" netrw
nnoremap <silent> <leader>ee :Explore<CR>
nnoremap <silent> <leader>et :Texplore<CR>
nnoremap <silent> <leader>ev :Vexplore!<CR>
" terminal
if has("terminal")
    nnoremap <silent> <leader>T :tab terminal<CR>
    tnoremap <C-\> <C-\><C-N>
endif
" misc
nnoremap <leader>zz /\s\+$<CR>
nnoremap <leader>dz :%s/\s\+$//g<CR>
nnoremap <leader>gf <C-W>gf
vnoremap <leader>gf <C-W>gf
nnoremap <silent> ZZ :echohl WarningMsg \| echo "Use :q! to quit without saving." \| echohl None<CR>
nnoremap <silent> <leader>zl :setlocal list! list?<CR>
nnoremap <silent> <leader>zs :setlocal spell! spell?<CR>
nnoremap <silent> <leader>zw :setlocal wrap! wrap?<CR>
nnoremap <silent> <leader>zc :call ColorColumnToggle()<CR>:set colorcolumn?<CR>
command! Vims edit ~/.vimrc
command! Srcs source ~/.vimrc

" --------------------------------------------------------------------------------
"   Functions
" --------------------------------------------------------------------------------
function! FixNetrwMap()
    if hasmapto('<Plug>NetrwRefresh')
        unmap <buffer> <C-L>
        nnoremap <C-L> <C-W>l
    endif
endfunction

function! FoldColumnToggle()
    if &foldcolumn
        setlocal foldcolumn=0
    else
        setlocal foldcolumn=2
    endif
endfunction

function! ColorColumnToggle()
    if &colorcolumn
        setlocal colorcolumn=
    else
        let &l:colorcolumn = &textwidth
    endif
endfunction

" --------------------------------------------------------------------------------
"   Plugins
" --------------------------------------------------------------------------------
" (Vim8 or newer)
" plugins are automatically loaded from `~/.vim/pack/*/start/*` (runtimepath)

" * vim-visual-multi:
"     [Normal] `<C-up/down>` to add a cursor
"     [Normal] `<C-n>` to select current match
"     [V-Multi] `<Tab>` to toggle visual mode
"     [V-Multi] `n/N` to select current match and jump to next/previous one
"     [V-Multi] `q/Q` to skip current match and jump to next/previous one
"     [V-Multi] `\\a` to align at all cursors
"     [V-Multi] `\\<` to align at cursors' lines with given char(s)
"     [V-Multi] `\\>` to align at cursors' lines with given pattern
"     [Both] `\\\` to add/remove cursor
"     [Both] `\\A` to select all matches
"     [Both] `\\/` to search a pattern
let g:VM_theme = 'lightblue1'

" --------------------------------------------------------------------------------
"   Status Line
" --------------------------------------------------------------------------------
" ref: https://github.com/echasnovski/mini.nvim/blob/main/lua/mini/statusline.lua
function! Statusline()
    let mode = mode()
    let modestr = (mode == 'n')  ? 'N'   :
                \ (mode == 'v')  ? 'V'   :
                \ (mode == 'V')  ? 'V-L' :
                \ (mode == 's')  ? 'S'   :
                \ (mode == 'S')  ? 'S-L' :
                \ (mode == 'i')  ? 'I'   :
                \ (mode == 'R')  ? 'R'   :
                \ (mode == 'c')  ? 'C'   :
                \ (mode == 'r')  ? 'P'   :
                \ (mode == '!')  ? 'Sh'  :
                \ (mode == 't')  ? 'T'   :
                \ mode
    let enc = (&fileencoding) ? &fileencoding : &encoding
    let s = ' '
    let s .= '[' . modestr . '] '
    let s .= '%<'
    let s .= (&buftype == 'terminal') ? '%t' : '%F%m%r'
    let s .= '%= '
    let s .= &filetype . ' ' . enc . '[' . &fileformat . '] '
    let s .= '%l|%L|%2v|%-2{virtcol("$") - 1} '
    return s
endfunction

set statusline=%!Statusline()

" --------------------------------------------------------------------------------
"   Tab Line
" --------------------------------------------------------------------------------
" ref: https://github.com/mkitt/tabline.vim
function! Tabline()
    let s = ''
    for i in range(tabpagenr('$'))
        let tab = i + 1
        let winnr = tabpagewinnr(tab)
        let buflist = tabpagebuflist(tab)
        let bufcnt = len(buflist)
        let bufnr = buflist[winnr - 1]
        let bufname = bufname(bufnr)
        let bufmodcnt = 0
        for buf in buflist
            if getbufvar(buf, "&mod")
                let bufmodcnt += 1
            endif
        endfor

        let s .= '%' . tab . 'T'
        let s .= (tab == tabpagenr()) ? '%#TabLineSel#' : '%#TabLine#'
        let s .= ' ' . tab .':'
        if bufcnt > 1
            let s .= '(' . bufcnt .')'
        endif
        let s .= '[' . fnamemodify(bufname, ':t') . ']'
        if bufmodcnt > 0
            let s .= '[' . ((bufmodcnt > 1) ? bufmodcnt : '') . '+]'
        endif
        let s .= ' '
        let s .= '%#TabLineFill#'
    endfor
    return s
endfunction

set tabline=%!Tabline()
